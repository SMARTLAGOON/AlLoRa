# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Python Package Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the new version (e.g., 1.2.1)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set new version
        run: echo "NEW_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Update version in setup.py
        run: |
          sed -i'' -e "s/^VERSION = .*/VERSION = '${{ env.NEW_VERSION }}'/" setup.py
          echo "setup.py updated to version ${{ env.NEW_VERSION }}"

      - name: Commit updated setup.py
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"

      - name: Fetch latest changes from remote
        run: git fetch

      - name: Rebase onto latest main branch
        run: git rebase origin/main

      - name: Push changes
        run: git push origin HEAD:${{ github.ref }}
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: |
          python -m build

      - name: Create and push new tag
        run: |
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release version v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Wheel File to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: AlLoRa-${{ env.NEW_VERSION }}-py3-none-any.whl
          asset_content_type: application/octet-stream

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
